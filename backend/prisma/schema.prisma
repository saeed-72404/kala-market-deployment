// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  WALLET
  CASH_ON_DELIVERY
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?    @unique
  firstName     String
  lastName      String
  password      String
  role          UserRole  @default(CUSTOMER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  phoneVerified Boolean   @default(false)
  avatar        String?
  dateOfBirth   DateTime?
  gender        String?

  // Security fields
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?
  lastLoginAt         DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  refreshTokens RefreshToken[]
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("users")
}

model RefreshToken {
  id         String    @id @default(cuid())
  token      String    @unique
  userId     String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  userAgent  String?
  ipAddress  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  title      String
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String  @default("Iran")
  phone      String?
  isDefault  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  image       String?
  icon        String?
  parentId    String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Brand {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  shortDescription String?
  sku              String   @unique
  barcode          String?
  price            Decimal  @db.Decimal(10, 2)
  comparePrice     Decimal? @db.Decimal(10, 2)
  costPrice        Decimal? @db.Decimal(10, 2)
  salePrice        Decimal? @db.Decimal(10, 2)
  stock            Int      @default(0)

  // Inventory
  trackQuantity     Boolean @default(true)
  quantity          Int     @default(0)
  lowStockThreshold Int     @default(10)

  // Physical properties
  weight     Decimal? @db.Decimal(8, 2)
  dimensions Json? // {length, width, height}

  // SEO
  metaTitle       String?
  metaDescription String?

  // Status
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  isDigital  Boolean @default(false)

  // Relations
  categoryId String
  brandId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category      Category         @relation(fields: [categoryId], references: [id])
  brand         Brand?           @relation(fields: [brandId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  attributes    Json?

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int     @default(0)

  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id         String  @id @default(cuid())
  productId  String
  name       String
  sku        String  @unique
  price      Decimal @db.Decimal(10, 2)
  quantity   Int     @default(0)
  attributes Json // {color: "red", size: "L"}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)

  // Pricing
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  shippingAmount Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2)

  // Shipping
  shippingAddressId String?
  shippingMethod    String?
  trackingNumber    String?

  // Payment
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod?

  // Timestamps
  orderDate   DateTime  @default(now())
  shippedAt   DateTime?
  deliveredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  total           Float?

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gatewayResponse Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id         String  @id @default(cuid())
  userId     String
  productId  String
  rating     Int // 1-5
  title      String?
  comment    String?
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String @id @default(cuid())
  userId    String
  productId String

  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Notification {
  id      String  @id @default(cuid())
  userId  String
  title   String
  message String
  type    String // email, sms, push
  isRead  Boolean @default(false)
  data    Json? // Additional data

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String  @id @default(cuid())
  userId    String?
  action    String // CREATE, UPDATE, DELETE
  entity    String // User, Product, Order, etc.
  entityId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       Json
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model File {
  id        Int      @id @default(autoincrement())
  fileName  String
  mimeType  String
  size      Int
  path      String
  createdAt DateTime @default(now())
}
